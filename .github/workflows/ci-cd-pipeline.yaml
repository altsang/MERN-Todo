name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install frontend dependencies
        run: npm install
        working-directory: ./frontend

      - name: Build frontend
        run: npm run build
        working-directory: ./frontend

      - name: Build and push Docker frontend image
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/mern-todo-frontend:latest ./frontend
          echo ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }} | docker login --username ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/mern-todo-frontend:latest
        env:
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Install backend dependencies
        run: npm install
        working-directory: ./backend

      - name: Build and push Docker backend image
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/mern-todo-backend:latest ./backend
          echo ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }} | docker login --username ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/mern-todo-backend:latest
        env:
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up Azure CLI
        uses: azure/login@v1
        with:
          creds: |
            {
              "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
              "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
              "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
              "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
            }

      - name: Deploy to AKS
        run: |
          kubectl apply -f kubernetes/frontend-deployment.yaml
          kubectl apply -f kubernetes/frontend-service.yaml
          kubectl apply -f kubernetes/frontend-ingress.yaml
          kubectl apply -f kubernetes/backend-deployment.yaml
          kubectl apply -f kubernetes/backend-service.yaml
        env:
          KUBECONFIG: ${{ secrets.KUBECONFIG }}
